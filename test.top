print (2 * 3 == 6)
print (2 * 3 * 4 == 24)
print (succ 4 == 5)
print (3 * succ 4 == 15)
print (4 * 3 + 2 == 14)
print (2 + 4 * 3 == 14)
print ( 5 / 2 - 1 == 1.5 )
print ( 3 / 2 * 5 == 7.5 )
print ( 1 - 2  + 3 == 2 )
print ( 4 * ( 2 + 3 ) == 20 )
print (4 / ((3 + 5) * 2) == 0.25)
print ((Function <Int -> Int>: x -> x * x) 3 == 9 )
print ((Function<Double,Double->Double>: x y -> (x+y)/2) 3.0 5.0 == 4.0 )
let x = 4
let y = 5
print ( x * y == 20 )
let foo = Function < Int -> Int > : x -> x * x
print ( foo 4 == 16 )
let bar = Function < Double , Double -> Double > : x y -> ( x + y ) / 2
print ( bar 3.0 5.0 == 4.0 )
print ( foo ( foo 4 ) == 256 )
let f = Function < Function < Int -> Int > , Int -> Int > : g z -> g ( g z )
print "----------------- hoge -----------------"
print ( f foo 4 == 256 )
let fact = Function < Int -> Int >: x -> if x > 0 then x * (fact (x - 1)) else 1
print ( fact 4 + 1 == 25 )
print ( 1 + fact 4 == 25 )
let g = Function < UnaryOp , Int -> Int > : op x -> op ( op x )
print ( g succ 4 == 6 )
print ( succ ( succ 4 ) == 6 ) # piyo
print ( head [1,2,3] == 1 )
let tpl = ( 4 , ( "hoge" , 1.0 / 2.0 ) )
print "------------- fuga ----------------------"
print ( fst tpl == 4 )
print ( snd tpl == ( "hoge" , 0.5 ) )
let swap = Function<(Int, String) -> (String, Int)>: tpl -> (snd tpl, fst tpl)
print ( swap ( 4 , "takaoka" ) )
let ls = seq 1 10
print ( pop ls )
print "-------------------------------"
let sum = Function < List Int -> Int > : ls -> if isEmpty ls then 0 else sum ( tail ls ) + head ls
print ( sum ls == 55 )
print ( take 3 ls == [ 1 , 2 , 3 ] )
print ( map succ ls )
print ( map foo ls )
print ( map fact ls )
print ("hoge" + "fuga" + "piyo")
print ([1, 2, 3] + [4, 5])

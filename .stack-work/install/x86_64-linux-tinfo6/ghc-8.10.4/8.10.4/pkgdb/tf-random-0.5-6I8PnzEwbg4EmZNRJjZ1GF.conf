name:                 tf-random
version:              0.5
visibility:           public
id:                   tf-random-0.5-6I8PnzEwbg4EmZNRJjZ1GF
key:                  tf-random-0.5-6I8PnzEwbg4EmZNRJjZ1GF
license:              BSD-3-Clause
maintainer:           Michał Pałka <michal.palka@chalmers.se>
author:               Michał Pałka <michal.palka@chalmers.se>
synopsis:             High-quality splittable pseudorandom number generator
description:
    This package contains an implementation of a high-quality splittable pseudorandom number generator. The generator is based on a cryptographic hash function built on top of the ThreeFish block cipher. See the paper /Splittable Pseudorandom Number Generators Using Cryptographic Hashing/ by Claessen, Pałka for details and the rationale of the design.

    The package provides the following:

    * A splittable PRNG that implements the standard 'System.Random.RandomGen' class.

    * The generator also implements an alternative version of the 'System.Random.TF.Gen.RandomGen' class (exported from "System.Random.TF.Gen"), which requires the generator to return pseudorandom integers from the full 32-bit range, and contains an n-way split function.

    * An alternative version of the @Random@ class is provided, which is linked to the new @RandomGen@ class, together with @Random@ instances for some integral types.

    * Two functions for initialising the generator with a non-deterministic seed: one using the system time, and one using the @\/dev\/urandom@ UNIX special file.

    The package uses an adapted version of the reference C implementation of ThreeFish from the reference package of the Skein hash function (<https://www.schneier.com/skein.html>), originally written by Doug Whiting.

    Please note that even though the generator provides very high-quality pseudorandom numbers, it has not been designed with cryptographic applications in mind.

category:             Random
abi:                  682f722107800ff2331e655192b5a99f
exposed:              True
exposed-modules:
    System.Random.TF System.Random.TF.Gen System.Random.TF.Init
    System.Random.TF.Instances

import-dirs:
    /home/takaoka/programming/haskell/Topos/.stack-work/install/x86_64-linux-tinfo6/ghc-8.10.4/8.10.4/lib/x86_64-linux-ghc-8.10.4/tf-random-0.5-6I8PnzEwbg4EmZNRJjZ1GF

library-dirs:
    /home/takaoka/programming/haskell/Topos/.stack-work/install/x86_64-linux-tinfo6/ghc-8.10.4/8.10.4/lib/x86_64-linux-ghc-8.10.4/tf-random-0.5-6I8PnzEwbg4EmZNRJjZ1GF

dynamic-library-dirs:
    /home/takaoka/programming/haskell/Topos/.stack-work/install/x86_64-linux-tinfo6/ghc-8.10.4/8.10.4/lib/x86_64-linux-ghc-8.10.4

data-dir:
    /home/takaoka/programming/haskell/Topos/.stack-work/install/x86_64-linux-tinfo6/ghc-8.10.4/8.10.4/share/x86_64-linux-ghc-8.10.4/tf-random-0.5

hs-libraries:         HStf-random-0.5-6I8PnzEwbg4EmZNRJjZ1GF
depends:
    base-4.14.1.0 primitive-0.7.1.0-Jxsyd70oUttYiCXCa0HqV
    random-1.2.0-6zIdUIrmHInBiqbyqpDYsu time-1.9.3

haddock-interfaces:
    /home/takaoka/programming/haskell/Topos/.stack-work/install/x86_64-linux-tinfo6/ghc-8.10.4/8.10.4/doc/tf-random-0.5/tf-random.haddock

haddock-html:
    /home/takaoka/programming/haskell/Topos/.stack-work/install/x86_64-linux-tinfo6/ghc-8.10.4/8.10.4/doc/tf-random-0.5
